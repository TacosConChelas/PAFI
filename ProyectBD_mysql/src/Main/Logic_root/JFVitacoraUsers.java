/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main.Logic_root;

import Main.Conexion;
import Main.VitacoraUser;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TheOneAboveAll
 */
public class JFVitacoraUsers extends javax.swing.JFrame {
    //mysqldump -u root -p nombreBD > C:\Respaldo\respaldo.sql 
    
    Conexion conect = new Conexion();
    Connection con;
    Statement st;
    DefaultTableModel modeloOrdenes;
    ResultSet rs;
    
    VitacoraUser vitacora = new VitacoraUser();
    
    /**
     * Creates new form JFShowUsers
     */
    public JFVitacoraUsers() {
        initComponents();
        this.showUsers(); 
        this.vitacora.vitacoraUsuarioSistema(9999, 3);
        //Al momento de ejecutarse el construtor de la case de van a mostrar en los campos de la tabla los usuarios disponibles 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableUsers = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jBCreatePDF = new javax.swing.JButton();
        jBShowUsers = new javax.swing.JButton();
        jBBackupDataBase = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idUser", "Fecha de ultima actualizacion", "Ultima acción", "Ultima tabla actualizada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableUsers);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Vitacora de Usuarios");

        jBCreatePDF.setText("Generar vitácora de acceso en archivo PDF");
        jBCreatePDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCreatePDFActionPerformed(evt);
            }
        });

        jBShowUsers.setText("Mostrar usuarios");
        jBShowUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBShowUsersActionPerformed(evt);
            }
        });

        jBBackupDataBase.setText("Respaldar la base de datos");
        jBBackupDataBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBackupDataBaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 388, Short.MAX_VALUE)
                        .addComponent(jBCreatePDF))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jBBackupDataBase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBShowUsers)))
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jBCreatePDF))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBShowUsers)
                    .addComponent(jBBackupDataBase))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 934, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void showUsers(){
       
        for (int i = 0; i < this.jTableUsers.getRowCount(); i++){
            modeloOrdenes.removeRow(i);
            i = i - 1;
        }
        String sql1 = "select * from vitacora;";
        //Se guarda la seleccion en lenguaje sql para mostrar a todos los usuarios y mostrar todo, a esepcion de su contraseña de cada uno
        try{
            con = conect.getConnection();
            st = con.createStatement();
            rs= st.executeQuery(sql1);
            //rs2 = st.executeQuery(sql2);
            
            Object[] user = new Object[4]; //Se crea un objeto del mismo tamaño al de la tabla de retorno de la busqueda que estamos haciendo 
            modeloOrdenes = (DefaultTableModel)this.jTableUsers.getModel();
            while(rs.next()){
                user[0] = rs.getInt("idUsuario");
                user[1] = rs.getString("dateLastActualizacion");
                user[2] = rs.getString("lastAction");
                user[3] = rs.getString("tablaActualizada");
                
                modeloOrdenes.addRow(user);  
               
            }
            this.jTableUsers.setModel(modeloOrdenes);
            
            
            
            //JOptionPane.showMessageDialog(null, "Registro exitoso a la base de datos");
            
        }catch(SQLException e){
            System.out.println(" El error es " + e);
        }
        
    
    }
    
    private void jBCreatePDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCreatePDFActionPerformed
        // CREACION DE LA VITACORA DE ACCESO
        Document documento = new Document(PageSize.A4.rotate(), 10f, 10, 100f, 0f);
        try{
            String ruta = System.getProperty("user.home");
            String ruta1 = "/Downloads/VitacoraDeUsuarios.pdf";
            
            PdfWriter.getInstance(documento, new FileOutputStream(ruta + ruta1));
            
            Paragraph titulo = new Paragraph();
            titulo.setAlignment(Paragraph.HEADER);
            titulo.setFont(FontFactory.getFont("Arial", 15, Font.ITALIC, BaseColor.BLACK));
            titulo.add("Vitacora de acceso \n");
            
            
            documento.open();
            documento.add(titulo);
            
            PdfPTable tabla = new PdfPTable(4);
            tabla.addCell("idUsuario");
            tabla.addCell("Ultima fecha de actualizacion");
            tabla.addCell("Ultima accion");
            tabla.addCell("Tabla actualizada");
            
            for (int i = 0; i < this.jTableUsers.getRowCount(); i++){
            modeloOrdenes.removeRow(i);
            i = i - 1;
            }
            String sql1 = "select * from vitacora;";
            
            try{
                con = conect.getConnection();
                st = con.createStatement();
                rs= st.executeQuery(sql1);
                //rs2 = st.executeQuery(sql2);
            
         
                //modeloOrdenes = (DefaultTableModel)this.jTableUsers.getModel();
                while(rs.next()){
                    tabla.addCell(String.valueOf(rs.getInt("idUsuario")));
                    tabla.addCell(String.valueOf(rs.getString("dateLastActualizacion")));
                    tabla.addCell(String.valueOf(rs.getString("lastAction")));
                    tabla.addCell(String.valueOf(rs.getString("tablaActualizada")));
                    
                    
                }
                //this.jTableUsers.setModel(modeloOrdenes);
              
            }catch(SQLException e){
                System.out.println(" El error es consulta sql " + e);
            }
            documento.add(tabla);
            documento.close();
            JOptionPane.showMessageDialog(null, "Se guardó en la ruta " + ruta + ruta1);
            
            //this.actualizacionTablaUser(0); 

            this.vitacora.vitacoraUsuarioSistema(9999, 4);//SE actualiza la tabla de usuarios para reflejar que el usuario root lo ultimo que realizo fue una itacora de acceso
        } catch (FileNotFoundException ex) {
                Logger.getLogger(JFVitacoraUsers.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException e){
            System.out.println("El error es creacion del pdf " + e);
            
        }
        //Date fechaD = new Date();
        
        //System.out.println("hoy es " + fechaD.toString());
        
        
        
        
    }//GEN-LAST:event_jBCreatePDFActionPerformed

    private void jBShowUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBShowUsersActionPerformed
        // TODO add your handling code here:
        
        
        this.showUsers();
    }//GEN-LAST:event_jBShowUsersActionPerformed
     public void actualizacionTablaUser(int option){
        /*
            Metodo usado para actualizar la tabla usuarios dependiendo de la ultima accion que estos hayan realizado
        */
        Date fechaD = new Date();
        String sqlVitacoraU = "";
        switch(option){
            case 0: 
                sqlVitacoraU = "update users set dateLastActualizacion = '" + fechaD.toString() + "', lastAction = 'Creacion de vitacora de acceso', tablaActualizada = null where idUser =  9999;";
                break;
                
            case 1:
                sqlVitacoraU = "update users set dateLastActualizacion = '" + fechaD.toString() + "', lastAction = 'Creación de respaldo', tablaActualizada = null where idUser = 9999;";
                break;
            
            default:     System.out.println("Sucedio un error en la insercion de la ultima accion realizada en la tabla de usuarios");
                break;
        }
        
        try{
                con = conect.getConnection();
                con.setAutoCommit(false);
                
                st = con.createStatement();
                st.executeUpdate(sqlVitacoraU);
                
                con.commit();
                con.setAutoCommit(true);
               
                //JOptionPane.showMessageDialog(null, "Registro exitoso");
                System.out.println("Se actualizo correctamente la tabla users");
            }catch(SQLException e){
                System.out.println(" El error es " + e);
                
            } finally {
                try {
                    if (st != null) st.close();
                    if (con != null) con.close();
                } catch (SQLException e) {  System.out.println("Error al cerrar la conexión: " + e);    }
            } 
        
    }
     
    public void backupDataBase(String backupDB){
        //Se escribe la ruta en dodne se va a guardar el respaldo de la bd que va a ser recibida como parametro dentro de esta
        
        String user = "root"; //Se coloca el usuario que tiene los permisos en el mysql para realizar el respaldo 
        String pwd = "12345";
        String database = "proyectobd";
        String commandRespaldo = String.format("mysqldump -u %s -p%s %s -r %s", user, pwd, database, backupDB);
        
        try {
            // Ejecutamos el comando en la terminal
            Process runtimeProcess = Runtime.getRuntime().exec(commandRespaldo);
            int processComplete = runtimeProcess.waitFor();
        
            // Verificamos si el proceso fue exitoso
            if (processComplete == 0) {
                JOptionPane.showMessageDialog(this, "Respaldo realizado con éxito.");
                //this.actualizacionTablaUser(1); 
                this.vitacora.vitacoraUsuarioSistema(9999, 2); //Se actualiza la tabla de usuarios para reflejar que la ultima accion de root fue crear un respaldo
                
            } else {
                JOptionPane.showMessageDialog(this, "Error al realizar el respaldo.");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    
    } 
    
    private void jBBackupDataBaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBackupDataBaseActionPerformed
        
        int validacion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que deseas respaldar la base de datos?", "Confirmar confirmar respaldo", JOptionPane.YES_NO_OPTION);
        if(validacion == JOptionPane.YES_OPTION) {
            JTextField fileNameField = new JTextField("C:\\RespaldosSQL\\respaldo.sql");
            /*
            Este respaldo debe de ir en .sql por lo que le colocamos un .sql para que el usuario solo tenga que ingresar el nombre de este archivo,
            en mi caso yo tengo una carpeta llamada \RespaldosSQL en mi disco C, si esta carpeta no está en el equipo del escritorio esta debera de ser cambiada
            */
            Object[] message = {
                "Ingrese el nombre del archivo de respaldo:", fileNameField
            };

            int option = JOptionPane.showConfirmDialog(this, message, "Guardar Respaldo", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                String backupPath = fileNameField.getText();
            
                backupDataBase(backupPath); // Llamar al método de respaldo con la ruta ingresada
            }
        
        } else {    System.out.println("Opcion cancelada por el usuario");  }
  
    }//GEN-LAST:event_jBBackupDataBaseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFVitacoraUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFVitacoraUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFVitacoraUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFVitacoraUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFVitacoraUsers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBackupDataBase;
    private javax.swing.JButton jBCreatePDF;
    private javax.swing.JButton jBShowUsers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableUsers;
    // End of variables declaration//GEN-END:variables
}
